name: Running Django Unit Tests

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  run-unit-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install postgresql -y
          sudo apt-get install postgresql-contrib -y
          sudo apt-get install postgresql-client -y
          echo waiting...
          sleep 6
          sudo service postgresql start
          sudo su - postgres -c "psql --echo-all -U postgres -d postgres --command \"CREATE USER runner WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD '';\""
          sudo su - postgres -c "psql --echo-all -U postgres -d postgres --command \"CREATE USER ${{secrets.DB_USER}} WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD '${{secrets.DB_PASSWORD}}';\""
          sudo su - postgres -c "psql --echo-all -U postgres -d postgres --command \"create database ${{secrets.DB_NAME}};\""
          echo finished pg commands...
          sudo service postgresql restart

      - name: Build env file
        working-directory: back-end
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DJ_DB_HOST=${{ secrets.DJ_DB_HOST }}" >> .env
          echo "DJ_DB_PORT=${{ secrets.DJ_DB_PORT }}" >> .env
          echo "DJANGO_SECRET_KEY=${{secrets.DJANGO_SECRET_KEY}}" >> .env

      - name: Install Dependencies
        working-directory: back-end
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Makemigrations && migrate
        working-directory: back-end
        run: |
          python3 manage.py makemigrations
          python3 manage.py migrate

      - name: Run Unit Tests
        working-directory: back-end
        run: python3 manage.py test tests.test_user.test_models
        id: test-results
        continue-on-error: true

      - name: Create Pull Request
        if: ${{ steps.test-results.outcome == 'success'}}
        run: |
          pr_url=$(curl -X POST \
            -H "Authorization: Bearer ${{secrets.PAGES_TOKEN}}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{github.repository}}/pulls \
            -d '{"head": "models", "base":"main", "title":"Merge models into main"}' | jq -r '._links.self.href')
          echo "Pull request created: $pr_url"
          echo $pr_url > pr.txt

      - name: Merge Pull Request
        if: ${{github.event_name == 'push' && github.ref == 'refs/heads/models' && steps.test-results.outcome == 'success'}}
        run: |
          pr_url=$(cat pr.txt)/merge
          echo $pr_url
          curl -X PUT \
            -H "Authorization: Bearer ${{secrets.PAGES_TOKEN}}" \
            -H "Accept: application/vnd.github.v3+json" \
            $pr_url \
            -d '{"merge_method":"squash"}'
          echo "Pull request merged"
